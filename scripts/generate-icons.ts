#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ESM 모듈에서 __dirname 흉내 내기
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// 프로젝트 루트 기준 src/... 으로 경로 설정
const ICONS_DIR = path.resolve(__dirname, '../src/stories/components/Atoms/UIIcon/icons');
const OUTPUT_FILE = path.join(ICONS_DIR, 'icons.ts');

console.log(`🔧 Looking for SVGs in: ${ICONS_DIR}`);

// icons 디렉터리 존재 확인
if (!fs.existsSync(ICONS_DIR)) {
  console.error(`❌ icons 폴더를 찾을 수 없습니다: ${ICONS_DIR}`);
  process.exit(1);
}

// .svg 파일만 필터
const files = fs.readdirSync(ICONS_DIR).filter(f => f.endsWith('.svg'));

if (files.length === 0) {
  console.warn(`⚠️ 해당 폴더에 .svg 파일이 하나도 없습니다.`);
}

// import 구문과 매핑 만들기
const imports: string[] = [];
const mappings: string[] = [];

for (const file of files) {
  const base = path.basename(file, '.svg');
  const component = `${capitalize(base)}Icon`;
  imports.push(`import ${component} from './${file}';`);
  mappings.push(`  '${base}': ${component},`);
}

// 최종 출력할 content
const content = `/* THIS FILE IS AUTO-GENERATED by generate-icons.ts */
${imports.join('\n')}

export const iconsMap = {
${mappings.join('\n')}
} as const;

export type IconName = keyof typeof iconsMap;
export type IconComponent = (typeof iconsMap)[IconName];
`;

// 쓰기
try {
  fs.writeFileSync(OUTPUT_FILE, content, 'utf-8');
  console.log(`✅ icons.ts 생성 완료: ${OUTPUT_FILE} (${files.length}개 아이콘)`);
} catch (err) {
  console.error(`❌ 파일 쓰기 실패: ${(err as Error).message}`);
  process.exit(1);
}

// 유틸
function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
